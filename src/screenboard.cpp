#include "Boards/BrytecBoard.h"

#include "Deserializer/BinaryArrayDeserializer.h"
#include <iostream>
#include <vector>
#include "novacancontrol.h"
#include <QDebug>
#include "screenboarddefs.h"
#include <fstream>
#include "Deserializer/BinaryPathDeserializer.h"
#include "screeninternaldefs.h"

const uint8_t progmem_data[] = {
0x4d,0x44,0,0x1,0x6,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x6,0,0,0,0x42,0x72,0x79,0x74,0x65,0x63,0xc,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x42,0x6f,0x61,0x72,0x64,0x64,0x1,0x1,0x1,0x1,0x9,0,0,0,0x9,0,0,0,0x4e,0x47,0,0x1,0x15,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x50,0x61,0x72,0x6b,0x69,0x6e,0x67,0x20,0x4c,0x69,0x67,0x68,0x74,0x73,0x57,0xad,0x70,0xf8,0xdd,0xf7,0xb7,0x47,0xb,0x1,0,0xa,0x1,0,0,0,0x80,0x3f,0x5,0,0,0,0,0,0x2,0,0,0,0x60,0x42,0,0,0x94,0x42,0x2,0,0,0x1,0,0,0,0,0x6b,0xd5,0xe,0xa9,0x88,0x2e,0x95,0xcc,0x28,0x4,0,0,0,0,0,0x2,0,0,0,0x60,0x42,0,0x80,0x88,0x43,0x2,0,0,0x1,0,0,0,0,0xce,0xf6,0xf1,0x3,0xa,0x41,0x3d,0xd5,0x28,0x11,0,0,0,0,0,0x7,0,0,0x80,0x91,0x43,0,0x80,0x8a,0x43,0x2,0x1,0,0x1,0,0,0x40,0x40,0,0,0,0,0x3,0,0,0x40,0xd,0x44,0,0,0x7,0x43,0x5,0x1,0x1,0,0,0,0,0,0,0,0,0,0,0,0x80,0x53,0x44,0,0,0xa8,0x42,0x1,0x1,0,0x5,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0x1,0,0,0,0,0,0,0xff,0xff,0xff,0,0,0x80,0x3f,0x5,0,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0x1,0x3,0,0,0,0,0,0,0x1,0,0x4e,0x47,0,0x1,0xf,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x4c,0x6f,0x77,0x20,0x42,0x65,0x61,0x6d,0x48,0x6b,0x9a,0xa3,0x14,0xb4,0xd4,0x2,0xb,0x1,0,0xf,0x1,0,0,0,0x80,0x3f,0x5,0,0,0,0,0,0x2,0,0,0,0x70,0x42,0,0,0xf0,0x41,0x2,0,0,0x1,0,0,0,0,0x6b,0xd5,0xe,0xa9,0x88,0x2e,0x95,0xcc,0x28,0x4,0,0,0,0,0,0x2,0,0,0,0x58,0x42,0,0,0x70,0x43,0x2,0,0,0x1,0,0,0,0,0xce,0xf6,0xf1,0x3,0xa,0x41,0x3d,0xd5,0x28,0x11,0,0,0,0,0,0x7,0,0,0x80,0x94,0x43,0,0,0x77,0x43,0x2,0x1,0,0x1,0,0,0,0,0,0,0,0,0x3,0,0,0x40,0x5,0x44,0,0,0x1,0x43,0x5,0x1,0x1,0,0,0,0,0,0,0,0,0,0,0,0xc0,0x5b,0x44,0,0,0xb6,0x42,0x1,0x1,0,0x5,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0x1,0,0,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x5,0,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0x1,0x3,0,0,0,0,0,0,0x2,0,0x4e,0x47,0,0x1,0x10,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x48,0x69,0x67,0x68,0x20,0x42,0x65,0x61,0x6d,0x5,0x10,0xe1,0xb,0x22,0x73,0x2,0xc5,0xb,0x1,0,0xf,0x1,0,0,0,0x80,0x3f,0x4,0,0,0,0,0,0x2,0,0,0,0x64,0x42,0,0,0x4c,0x42,0x2,0,0,0x1,0,0,0,0,0x6b,0xd5,0xe,0xa9,0x88,0x2e,0x95,0xcc,0x28,0x4,0,0,0,0,0,0x2,0,0,0,0x58,0x42,0,0,0x6e,0x43,0x2,0,0,0x1,0,0,0,0,0x7d,0x20,0xbf,0xf8,0x2e,0xc2,0x9b,0x89,0x28,0x10,0,0,0,0,0,0x3,0,0,0,0xaa,0x43,0,0,0xec,0x42,0x5,0x1,0x1,0,0,0,0,0,0,0,0,0,0,0,0xc0,0x8,0x44,0,0,0xee,0x42,0x1,0x1,0,0x4,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0x80,0x3e,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x5,0,0,0,0,0,0x80,0x3f,0x1,0,0,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0x1,0x2,0,0,0,0,0,0,0x3,0,0x4e,0x47,0,0x1,0x11,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x46,0x6f,0x67,0x20,0x4c,0x69,0x67,0x68,0x74,0x73,0x8e,0xc8,0xdf,0x75,0x46,0x3b,0x4c,0x9f,0xb,0x1,0,0xa,0x1,0,0,0,0x80,0x3f,0x5,0,0,0,0,0,0x2,0,0,0,0x8e,0x42,0,0,0x10,0x41,0x2,0,0,0x1,0,0,0,0,0x6b,0xd5,0xe,0xa9,0x88,0x2e,0x95,0xcc,0x28,0x4,0,0,0,0,0,0x2,0,0,0,0x8c,0x42,0,0,0x32,0x43,0x2,0,0,0x1,0,0,0,0,0xce,0xf6,0xf1,0x3,0xa,0x41,0x3d,0xd5,0x28,0x11,0,0,0,0,0,0x7,0,0,0x80,0xa0,0x43,0,0,0x37,0x43,0x2,0x1,0,0x1,0,0,0x40,0x40,0,0,0,0,0x3,0,0,0x40,0x6,0x44,0,0,0xe0,0x42,0x5,0x1,0x1,0,0,0,0,0,0,0,0,0,0,0,0xc0,0x37,0x44,0,0,0xd4,0x42,0x1,0x1,0,0x5,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0x80,0x3e,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0x1,0,0,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x5,0,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0x1,0x3,0,0,0,0,0,0,0x4,0,0x4e,0x47,0,0x1,0x10,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x4c,0x65,0x66,0x74,0x20,0x54,0x75,0x72,0x6e,0xc3,0x3a,0x26,0xb7,0x51,0xab,0xdb,0x5,0xb,0x1,0,0x5,0x1,0,0,0,0x80,0x3f,0x5,0,0,0,0,0,0x2,0,0,0,0x80,0x42,0,0,0xb0,0x41,0x2,0,0,0x1,0,0,0,0,0x6b,0xd5,0xe,0xa9,0x88,0x2e,0x95,0xcc,0x28,0x4,0,0,0,0,0,0x2,0,0,0,0x7c,0x42,0,0,0x2f,0x43,0x2,0,0,0x1,0,0,0,0,0xe4,0xa2,0x44,0x14,0x9,0x24,0xa1,0xaf,0x50,0xe,0,0,0,0,0,0x6,0,0,0,0x80,0x42,0,0x80,0xae,0x43,0x3,0,0,0,0x2,0,0,0,0,0,0xa0,0x9f,0x44,0,0,0,0,0x3,0,0,0x80,0xa2,0x43,0,0,0xc0,0x42,0x5,0x1,0x1,0x1,0,0,0,0,0,0,0,0,0,0,0,0x41,0x44,0,0,0x6c,0x42,0x1,0x1,0,0x5,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x3,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0xc0,0x3f,0x5,0,0,0,0,0,0x80,0x3f,0x1,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0x1,0x3,0,0,0,0,0,0,0x5,0,0x4e,0x47,0,0x1,0x11,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x52,0x69,0x67,0x68,0x74,0x20,0x54,0x75,0x72,0x6e,0xd3,0x25,0xdb,0xd0,0x40,0xdc,0x9a,0x92,0xb,0x1,0,0x5,0x1,0,0,0,0x80,0x3f,0x5,0,0,0,0,0,0x2,0,0,0,0x8c,0x42,0,0,0xb0,0x41,0x2,0,0,0x1,0,0,0,0,0x6b,0xd5,0xe,0xa9,0x88,0x2e,0x95,0xcc,0x28,0x4,0,0,0,0,0,0x2,0,0,0,0x88,0x42,0,0,0x35,0x43,0x2,0,0,0x1,0,0,0,0,0x79,0xce,0x86,0x48,0x15,0x8d,0xd9,0x34,0x50,0xd,0,0,0,0,0,0x6,0,0,0,0x86,0x42,0,0x80,0xb0,0x43,0x3,0,0,0,0x2,0,0,0,0,0,0xc0,0x5f,0x44,0,0,0,0,0x3,0,0,0x80,0xb8,0x43,0,0,0x96,0x42,0x5,0x1,0x1,0x1,0,0,0,0,0,0,0,0,0,0,0x80,0x2c,0x44,0,0,0x9e,0x42,0x1,0x1,0,0x5,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0,0x40,0x3,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0xc0,0x3f,0x5,0,0,0,0,0,0x80,0x3f,0x1,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0xff,0xff,0xff,0,0,0x80,0x3f,0x1,0x3,0,0,0,0,0,0,0x6,0,0x4e,0x47,0,0x1,0x10,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x47,0x61,0x73,0x20,0x4c,0x65,0x76,0x65,0x6c,0xc6,0x1e,0xc3,0xa9,0xaf,0xff,0xd5,0x26,0xb,0x1,0,0,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0,0x2,0,0,0,0x98,0x42,0,0,0x44,0x42,0x2,0,0,0x1,0,0,0,0,0x9,0xe7,0x2d,0xdb,0xe4,0xf5,0xca,0x37,0x46,0xb,0,0,0,0,0,0,0,0,0,0xaf,0x43,0,0,0x48,0x42,0x1,0x1,0,0x2,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0x80,0x3e,0x1,0,0,0,0,0,0,0,0x7,0,0x4e,0x47,0,0x1,0x11,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x4d,0x65,0x74,0x68,0x20,0x4c,0x65,0x76,0x65,0x6c,0x33,0xbe,0x12,0xd4,0x98,0xef,0x54,0xea,0xb,0x1,0,0,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0,0x2,0,0,0,0x8e,0x42,0,0,0x28,0x42,0x2,0,0,0x1,0,0,0,0,0x30,0xdd,0xc2,0xd5,0xfd,0xf1,0x79,0x91,0x46,0xc,0,0,0,0,0,0,0,0,0,0xaf,0x43,0,0,0x48,0x42,0x1,0x1,0,0x2,0,0x2,0xff,0xff,0xff,0,0,0,0,0xff,0xff,0xff,0,0,0x80,0x3e,0x1,0,0,0,0,0,0,0,0x8,0,0x4e,0x47,0,0x1,0x12,0,0,0,0x53,0x63,0x72,0x65,0x65,0x6e,0x20,0x54,0x65,0x73,0x74,0x20,0x42,0x75,0x74,0x74,0x6f,0x6e,0x95,0x4,0x80,0x98,0xda,0x87,0xa3,0x6f,0xb,0x1,0,0,0,0,0,0,0x80,0x3f,0x2,0,0,0,0,0,0x1,0,0,0,0x48,0x42,0,0,0x48,0x42,0,0x1,0,0,0,0,0,0,0,0,0,0,0,0,0xaf,0x43,0,0,0x48,0x42,0x1,0x1,0,0x2,0,0,0x1,0,0,0,0,0,0,0,
};



namespace Brytec {

uint32_t configRequestedSize = 0;
std::vector<uint8_t> tempConfig;

#ifdef NOVA
std::filesystem::path configPath("BrytecConfig.btcfg");
BinaryPathDeserializer pathDeserializer(configPath);
Brytec::BinaryArrayDeserializer des(progmem_data, sizeof(progmem_data));
#endif


BinaryDeserializer* BrytecBoard::getDeserializer()
{
    #ifdef NOVA
    if(std::filesystem::exists(configPath)){
        // Get newest from file
        pathDeserializer = BinaryPathDeserializer(configPath);
        return &pathDeserializer;
    }

    // temp program for testing
    des = Brytec::BinaryArrayDeserializer(progmem_data, sizeof(progmem_data));
    return &des;
#endif
    return nullptr;
}

void BrytecBoard::error(EBrytecErrors error)
{
    switch (error) {
    case EBrytecErrors::ModuleHeader:
        qDebug() << "Module header is wrong";
        break;
    case EBrytecErrors::NodeGroupHeader:
        qDebug() << "Node Group header is wrong";
        break;
    case EBrytecErrors::ModuleNotEnabled:
        qDebug() << "This module is not enabled";
        break;
    case EBrytecErrors::AddNodeFailed:
        qDebug() << "Failed to add node";
        break;
    case EBrytecErrors::NodeVectorOutOfSpace:
        qDebug() << "Node Vector out of space";
        break;
    case EBrytecErrors::FailedToCreateNode:
        qDebug() << "Failed to create node";
        break;
    case EBrytecErrors::NodeIndexOutOfBounds:
        qDebug() << "Node index out of bounds";
        break;
    case EBrytecErrors::BadAlloc:
        qDebug() << "Node group allocation failed";
        break;
    case EBrytecErrors::CanBufferFull:
        qDebug() << "Can Buffer Full";
        break;

    default:
        qDebug() << "Unknown Error";
        break;
    }
}

void BrytecBoard::setupCan(uint8_t index, CanSpeed::Types speed)
{
    if(index == BT_CAN_Hi_Lo)
        NovaCanControl::get()->connectToCan();
}

void BrytecBoard::setupPin(uint16_t index, IOTypes::Types type)
{
    // Not used
}

void BrytecBoard::shutdownAllPins()
{
}

float BrytecBoard::getPinValue(uint16_t index, IOTypes::Types type)
{
    switch(index){
    case BT_INTERNAL_Screen_Test_Button:
        return NovaCanControl::get()->m_testButton;
    }

    return 0.0f;
}

float BrytecBoard::getPinVoltage(uint16_t index)
{
    // Not used
    return 0.0f;
}

float BrytecBoard::getPinCurrent(uint16_t index)
{
    // Not used
    return 0.0f;
}

void BrytecBoard::setPinValue(uint16_t index, IOTypes::Types type, float value)
{
    switch(index){
    case BT_INTERNAL_Screen_Parking_Lights:
        NovaCanControl::get()->m_parkingLights = FloatToBool(value);
        break;
    case BT_INTERNAL_Screen_Low_Beam:
        NovaCanControl::get()->m_lowBeam = FloatToBool(value);
        break;
    case BT_INTERNAL_Screen_High_Beam:
        NovaCanControl::get()->m_highBeam = FloatToBool(value);
        break;
    case BT_INTERNAL_Screen_Fog_Lights:
        NovaCanControl::get()->m_fogLights = FloatToBool(value);
        break;
    case BT_INTERNAL_Screen_Left_Turn:
        NovaCanControl::get()->m_leftTurn = FloatToBool(value);
        break;
    case BT_INTERNAL_Screen_Right_Turn:
        NovaCanControl::get()->m_rightTurn = FloatToBool(value);
        break;
    case BT_INTERNAL_Screen_Gas_Level:
        NovaCanControl::get()->m_gasLevel = value;
        break;
    case BT_INTERNAL_Screen_Meth_Level:
        NovaCanControl::get()->m_methLevel = value;
        break;
    }
}

void BrytecBoard::sendCan(uint8_t index, const CanFrame& frame)
{
    if(index == BT_CAN_Hi_Lo)
        NovaCanControl::get()->writeFrame(frame);
}

void BrytecBoard::sendBrytecCanUsb(const CanFrame& frame)
{
    // Not used
}

void BrytecBoard::ReserveConfigSize(uint16_t size)
{
    configRequestedSize = size;
    tempConfig.reserve(size);
}

void BrytecBoard::updateConfig(uint8_t* data, uint32_t size, uint32_t offset)
{
    #ifdef NOVA
    tempConfig.insert(tempConfig.begin() + offset, data, data + size);

    if(size + offset >= configRequestedSize){
        // write to file
        qDebug() << "Writing brytec config to file";
        std::ofstream fout(configPath, std::ofstream::binary);
        fout.write((char*)tempConfig.data(), tempConfig.size());
        tempConfig.clear();
    }
    #endif
}

uint32_t BrytecBoard::getTemplateSize()
{
    return sizeof(moduleTemplate);
}

void BrytecBoard::getTemplateData(uint8_t* dest, uint32_t offset, uint32_t length)
{
    if (offset > sizeof(moduleTemplate))
            return;

    memcpy(dest, &moduleTemplate[offset], length);
}

uint32_t BrytecBoard::getConfigSize()
{
    #ifdef NOVA
    return pathDeserializer.getTotalLength();
    #endif
}

void BrytecBoard::getConfigData(uint8_t* dest, uint32_t offset, uint32_t length)
{
    #ifdef NOVA
    pathDeserializer.getRawData(dest, offset, length);
    #endif
}

}
